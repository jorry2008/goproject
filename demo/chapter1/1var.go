// Package chapter1 声明与初始化
package chapter1

// 只声明不初始化两个变量，一个类型
var x, y int

// 这种因式分解关键字的写法一般用于声明全局变量
var (
	a int
	b bool
)

// 一个类型声明两个变量，同时初始化两个值
var c, d int = 1, 2

// 两个类变量都可以通过值确定自己的类型
var e, f = 123, "hello"

// 所有有类型但不初始化的变量都有默认值，float32 的默认值为：+0.000000e+000
var ff float32

// 便捷格式，不能用于函数外，只能在函数体中出现
//g, h := 123, "hello"

func Example1() {
	println("Example1:")
	// 便捷格式批量声明的变量，必须使用，否则报错【:=这是唯一声明不需要var的方式，其它方式没有var就成了赋值操作而不是声明】
	g, h := 123, "hello"
	println(x, y, a, b, c, d, e, f, g, h, ff)
}

/**
小结：
1.声明前提
不论声明或初始化的方式是什么样的，必须能保证声明的类型是确定的！这个是唯一的前提。

2.使用技巧
并行或批量赋值，有个技巧：
var a,b = 20,30
a, b = b, a // 同类型变量交换

3.空白符和函数返回值
空白标识符 _ 也被用于抛弃值，如值 5 在：_, b = 5, 7 中被抛弃。
_ 实际上是一个只写变量，你不能得到它的值。这样做是因为 Go 语言中你必须使用所有被声明的变量，但有时你并不需要使用从一个函数得到的所有返回值。
并行赋值也被用于当一个函数返回多个返回值时，比如这里的 val 和错误 err 是通过调用 Func1 函数同时得到：val, err = Func1(var1)。
*/
